

1. MPEG Brief Look

	- using MPEG1, playback is smooth if all or only a few frames needed to be decoded. This can be improved
	- Goal: To integrate software-decoded MPEG streams into continuous playback systems, and anazlyze the quality of the streams.

	- "Initially, this system supported 8kHz 8-bit audio and hardware-assisted motion JPEG compressed video streams.This paper describes the integration of a software decoded MPEG-i video stream into this system."
	- CMS is the source of the video data
	- CMPlayer is an application for video playback
	- CMX decodes the packets sent from UDP
	- X Display outputs the decoded packets
	- Audio Device outputs the decoded packets
	- In playback, I frames are prioritized then P, then B
	
	- Playing Backwards is difficult, because if you have a B frame at the moment, you must decode an arbitrary I and P frames that the B frame is based on. 

	

2. Distributed MPEG System Brief Look
	- Due to the internet's diversity of workload stations and random/dynamic access to media, we need a new client/server synchronization method.
	- Instead of a software-feedback system that is developed ad-hoc and hardcoded to work for specific applications, make it more generalized by using a toolkit-based approach



Paper 2 Summary:


- want to provide the optimal synchroniztion between client and server stations to decrease frame drops and use better heuristics to adjustattributes such as frame rate given the state of the application and transmission of data packets


- software feedback mechanisms are hardcoded and specific to the application they are running on, hard to give a general understanding on how it works since one version isn't ubitiquous on all platforms

- solution: distributed, real-time, video-streaming system in which video servers are numerous

- client buffers streams to reduce network jitter

- trade presentation quality with reduced frame drops

- two components to the toolkit approach, a feedback signal that filters out a system control information to input into a control algorithm machine, that compares the goal specification with feedback of the actual results to output an algorithm to fix the problem

- the clocks that the server and client work on may differ, in which drift can happen substantively as time goes on

- rather than drop frames at the intermediate stages of the pipeline, drop frames intelligently at the source of the pipeline

- smoothness measure: presentation jitter -> actual logical time of frame - target logical time of frame

- both berkley and this university rely on the same decoder, but the feedback mechanisms are built differently, with Berkely relying on NTP for synchronization and Oregon have software built-in the player for synchronization
